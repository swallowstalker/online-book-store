// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/bookstore/middleware/auth.go

// Package mock_middleware is a generated GoMock package.
package mock_middleware

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/swallowstalker/online-book-store/modules/bookstore/entity"
)

// MockUserEmailChecker is a mock of UserEmailChecker interface.
type MockUserEmailChecker struct {
	ctrl     *gomock.Controller
	recorder *MockUserEmailCheckerMockRecorder
}

// MockUserEmailCheckerMockRecorder is the mock recorder for MockUserEmailChecker.
type MockUserEmailCheckerMockRecorder struct {
	mock *MockUserEmailChecker
}

// NewMockUserEmailChecker creates a new mock instance.
func NewMockUserEmailChecker(ctrl *gomock.Controller) *MockUserEmailChecker {
	mock := &MockUserEmailChecker{ctrl: ctrl}
	mock.recorder = &MockUserEmailCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserEmailChecker) EXPECT() *MockUserEmailCheckerMockRecorder {
	return m.recorder
}

// FindUser mocks base method.
func (m *MockUserEmailChecker) FindUser(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserEmailCheckerMockRecorder) FindUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserEmailChecker)(nil).FindUser), ctx, email)
}
