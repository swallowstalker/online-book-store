// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/bookstore/repository/db/converter.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/swallowstalker/online-book-store/modules/bookstore/repository/db"
)

// MockQuerierWithTx is a mock of QuerierWithTx interface.
type MockQuerierWithTx struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierWithTxMockRecorder
}

// MockQuerierWithTxMockRecorder is the mock recorder for MockQuerierWithTx.
type MockQuerierWithTxMockRecorder struct {
	mock *MockQuerierWithTx
}

// NewMockQuerierWithTx creates a new mock instance.
func NewMockQuerierWithTx(ctrl *gomock.Controller) *MockQuerierWithTx {
	mock := &MockQuerierWithTx{ctrl: ctrl}
	mock.recorder = &MockQuerierWithTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerierWithTx) EXPECT() *MockQuerierWithTxMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockQuerierWithTx) CreateOrder(ctx context.Context, userID int64) (*db.CreateOrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID)
	ret0, _ := ret[0].(*db.CreateOrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockQuerierWithTxMockRecorder) CreateOrder(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockQuerierWithTx)(nil).CreateOrder), ctx, userID)
}

// CreateOrderItem mocks base method.
func (m *MockQuerierWithTx) CreateOrderItem(ctx context.Context, arg db.CreateOrderItemParams) (*db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", ctx, arg)
	ret0, _ := ret[0].(*db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockQuerierWithTxMockRecorder) CreateOrderItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockQuerierWithTx)(nil).CreateOrderItem), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerierWithTx) CreateUser(ctx context.Context, email string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierWithTxMockRecorder) CreateUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerierWithTx)(nil).CreateUser), ctx, email)
}

// FindBook mocks base method.
func (m *MockQuerierWithTx) FindBook(ctx context.Context, id int64) (*db.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBook", ctx, id)
	ret0, _ := ret[0].(*db.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBook indicates an expected call of FindBook.
func (mr *MockQuerierWithTxMockRecorder) FindBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBook", reflect.TypeOf((*MockQuerierWithTx)(nil).FindBook), ctx, id)
}

// FindUser mocks base method.
func (m *MockQuerierWithTx) FindUser(ctx context.Context, email string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, email)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockQuerierWithTxMockRecorder) FindUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockQuerierWithTx)(nil).FindUser), ctx, email)
}

// FindUserByToken mocks base method.
func (m *MockQuerierWithTx) FindUserByToken(ctx context.Context, token pgtype.Text) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByToken", ctx, token)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByToken indicates an expected call of FindUserByToken.
func (mr *MockQuerierWithTxMockRecorder) FindUserByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByToken", reflect.TypeOf((*MockQuerierWithTx)(nil).FindUserByToken), ctx, token)
}

// GetBooks mocks base method.
func (m *MockQuerierWithTx) GetBooks(ctx context.Context, arg db.GetBooksParams) ([]*db.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx, arg)
	ret0, _ := ret[0].([]*db.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockQuerierWithTxMockRecorder) GetBooks(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockQuerierWithTx)(nil).GetBooks), ctx, arg)
}

// GetMyOrderItems mocks base method.
func (m *MockQuerierWithTx) GetMyOrderItems(ctx context.Context, orderID int64) ([]*db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyOrderItems", ctx, orderID)
	ret0, _ := ret[0].([]*db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyOrderItems indicates an expected call of GetMyOrderItems.
func (mr *MockQuerierWithTxMockRecorder) GetMyOrderItems(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyOrderItems", reflect.TypeOf((*MockQuerierWithTx)(nil).GetMyOrderItems), ctx, orderID)
}

// GetMyOrders mocks base method.
func (m *MockQuerierWithTx) GetMyOrders(ctx context.Context, arg db.GetMyOrdersParams) ([]*db.GetMyOrdersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyOrders", ctx, arg)
	ret0, _ := ret[0].([]*db.GetMyOrdersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyOrders indicates an expected call of GetMyOrders.
func (mr *MockQuerierWithTxMockRecorder) GetMyOrders(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyOrders", reflect.TypeOf((*MockQuerierWithTx)(nil).GetMyOrders), ctx, arg)
}

// WrapTx mocks base method.
func (m *MockQuerierWithTx) WrapTx(tx pgx.Tx) db.QuerierWithTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapTx", tx)
	ret0, _ := ret[0].(db.QuerierWithTx)
	return ret0
}

// WrapTx indicates an expected call of WrapTx.
func (mr *MockQuerierWithTxMockRecorder) WrapTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapTx", reflect.TypeOf((*MockQuerierWithTx)(nil).WrapTx), tx)
}
