// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.sql

package db

import (
	"context"
)

const findBook = `-- name: FindBook :one
SELECT id, name, created_at FROM "books" WHERE "id" = $1
`

func (q *Queries) FindBook(ctx context.Context, id int64) (*Book, error) {
	row := q.db.QueryRow(ctx, findBook, id)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return &i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, name, created_at FROM "books" LIMIT $1 OFFSET $2
`

type GetBooksParams struct {
	Limit  int64 `db:"limit"`
	Offset int64 `db:"offset"`
}

func (q *Queries) GetBooks(ctx context.Context, arg GetBooksParams) ([]*Book, error) {
	rows, err := q.db.Query(ctx, getBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
