// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order_items.sql

package db

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO "order_items" ("order_id", "book_id", "amount", "created_at") VALUES ($1, $2, $3, NOW()) RETURNING id, order_id, book_id, amount, created_at
`

type CreateOrderItemParams struct {
	OrderID int64 `db:"order_id"`
	BookID  int64 `db:"book_id"`
	Amount  int64 `db:"amount"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (*OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem, arg.OrderID, arg.BookID, arg.Amount)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.BookID,
		&i.Amount,
		&i.CreatedAt,
	)
	return &i, err
}

const getMyOrderItems = `-- name: GetMyOrderItems :many
SELECT id, order_id, book_id, amount, created_at FROM "order_items" WHERE order_id = $1
`

func (q *Queries) GetMyOrderItems(ctx context.Context, orderID int64) ([]*OrderItem, error) {
	rows, err := q.db.Query(ctx, getMyOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.BookID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
